#include <iostream>
using namespace std;
const int CantidadIngresos = 6;
const int CantidadElementos = 8;

struct Conectividad{
	int vector[CantidadElementos];

};

void Inicializar(Conectividad& conectividad);
void Conectar(Conectividad& conectividad, int p, int q);
bool EstanConectados(Conectividad conectividad, int p, int q);//se fija si hay una conecci√≥n reflexiba o conmutativa o transitiva
int ObtenerRaiz(Conectividad conectividad, int valor);

int main(){
	Conectividad conectividad;
	Inicializar(conectividad);
	int p,q;
	for(int numeroIngreso = 0;
			numeroIngreso < CantidadIngresos;
			++numeroIngreso)
	{
		cin>>p;
		cin>>q;
		if(EstanConectados(conectividad, p, q))
		{
			cout<<"-"<<endl;
		}
		else
		{
			Conectar(conectividad, p, q);
			cout<<p<<"-"<<q<<endl;
		}
	}
	return 0;
}

void Inicializar(Conectividad& conectividad)
{
	for(int i=0; i<CantidadElementos; ++i)
	{
		conectividad.vector[i] = i;
	}
}

void Conectar(Conectividad& conectividad, int p, int q)
{
	int raizQ = ObtenerRaiz(conectividad, q);
	conectividad.vector[p] = raizQ;
}

bool EstanConectados(Conectividad conectividad, int p, int q)
{
	int raizP = ObtenerRaiz(conectividad, p);
	int raizQ = ObtenerRaiz(conectividad, q);
	return raizP == raizQ;
}

int EsRaiz(Conectividad conectividad, int q)
{
	return conectividad.vector[q] == q;
}

int ObtenerRaiz(Conectividad conectividad, int q)
{
	int raiz = q;
	while(!EsRaiz(conectividad, q))
	{
		raiz = conectividad.vector[q];
		q = conectividad.vector[raiz];
	}
    return raiz;
}
